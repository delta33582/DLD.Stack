// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/04/2023 19:43:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    STACK
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module STACK_vlg_sample_tst(
	CLK,
	EN,
	INP,
	PUSH/POP,
	RSTN,
	sampler_tx
);
input  CLK;
input  EN;
input [7:0] INP;
input  PUSH/POP;
input  RSTN;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or EN or INP or PUSH/POP or RSTN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module STACK_vlg_check_tst (
	DBG_TOP,
	DBG_TOP-1,
	EMPTY,
	FULL,
	OUT,
	sampler_rx
);
input [4:0] DBG_TOP;
input [4:0] DBG_TOP-1;
input  EMPTY;
input  FULL;
input [7:0] OUT;
input sampler_rx;

reg [4:0] DBG_TOP_expected;
reg [4:0] DBG_TOP-1_expected;
reg  EMPTY_expected;
reg  FULL_expected;
reg [7:0] OUT_expected;

reg [4:0] DBG_TOP_prev;
reg [4:0] DBG_TOP-1_prev;
reg  EMPTY_prev;
reg  FULL_prev;
reg [7:0] OUT_prev;

reg [4:0] DBG_TOP_expected_prev;
reg [4:0] DBG_TOP-1_expected_prev;
reg  EMPTY_expected_prev;
reg  FULL_expected_prev;
reg [7:0] OUT_expected_prev;

reg [4:0] last_DBG_TOP_exp;
reg [4:0] last_DBG_TOP-1_exp;
reg  last_EMPTY_exp;
reg  last_FULL_exp;
reg [7:0] last_OUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	DBG_TOP_prev = DBG_TOP;
	DBG_TOP-1_prev = DBG_TOP-1;
	EMPTY_prev = EMPTY;
	FULL_prev = FULL;
	OUT_prev = OUT;
end

// update expected /o prevs

always @(trigger)
begin
	DBG_TOP_expected_prev = DBG_TOP_expected;
	DBG_TOP-1_expected_prev = DBG_TOP-1_expected;
	EMPTY_expected_prev = EMPTY_expected;
	FULL_expected_prev = FULL_expected;
	OUT_expected_prev = OUT_expected;
end


// expected OUT[ 7 ]
initial
begin
	OUT_expected[7] = 1'bX;
end 
// expected OUT[ 6 ]
initial
begin
	OUT_expected[6] = 1'bX;
end 
// expected OUT[ 5 ]
initial
begin
	OUT_expected[5] = 1'bX;
end 
// expected OUT[ 4 ]
initial
begin
	OUT_expected[4] = 1'bX;
end 
// expected OUT[ 3 ]
initial
begin
	OUT_expected[3] = 1'bX;
end 
// expected OUT[ 2 ]
initial
begin
	OUT_expected[2] = 1'bX;
end 
// expected OUT[ 1 ]
initial
begin
	OUT_expected[1] = 1'bX;
end 
// expected OUT[ 0 ]
initial
begin
	OUT_expected[0] = 1'bX;
end 
// expected DBG_TOP[ 4 ]
initial
begin
	DBG_TOP_expected[4] = 1'bX;
end 
// expected DBG_TOP[ 3 ]
initial
begin
	DBG_TOP_expected[3] = 1'bX;
end 
// expected DBG_TOP[ 2 ]
initial
begin
	DBG_TOP_expected[2] = 1'bX;
end 
// expected DBG_TOP[ 1 ]
initial
begin
	DBG_TOP_expected[1] = 1'bX;
end 
// expected DBG_TOP[ 0 ]
initial
begin
	DBG_TOP_expected[0] = 1'bX;
end 
// expected \DBG_TOP-1 [ 4 ]
initial
begin
	DBG_TOP-1_expected[4] = 1'bX;
end 
// expected \DBG_TOP-1 [ 3 ]
initial
begin
	DBG_TOP-1_expected[3] = 1'bX;
end 
// expected \DBG_TOP-1 [ 2 ]
initial
begin
	DBG_TOP-1_expected[2] = 1'bX;
end 
// expected \DBG_TOP-1 [ 1 ]
initial
begin
	DBG_TOP-1_expected[1] = 1'bX;
end 
// expected \DBG_TOP-1 [ 0 ]
initial
begin
	DBG_TOP-1_expected[0] = 1'bX;
end 

// expected EMPTY
initial
begin
	EMPTY_expected = 1'bX;
end 

// expected FULL
initial
begin
	FULL_expected = 1'bX;
end 
// generate trigger
always @(DBG_TOP_expected or DBG_TOP or DBG_TOP-1_expected or DBG_TOP-1 or EMPTY_expected or EMPTY or FULL_expected or FULL or OUT_expected or OUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DBG_TOP = %b | expected DBG_TOP-1 = %b | expected EMPTY = %b | expected FULL = %b | expected OUT = %b | ",DBG_TOP_expected_prev,DBG_TOP-1_expected_prev,EMPTY_expected_prev,FULL_expected_prev,OUT_expected_prev);
	$display("| real DBG_TOP = %b | real DBG_TOP-1 = %b | real EMPTY = %b | real FULL = %b | real OUT = %b | ",DBG_TOP_prev,DBG_TOP-1_prev,EMPTY_prev,FULL_prev,OUT_prev);
`endif
	if (
		( DBG_TOP_expected_prev[0] !== 1'bx ) && ( DBG_TOP_prev[0] !== DBG_TOP_expected_prev[0] )
		&& ((DBG_TOP_expected_prev[0] !== last_DBG_TOP_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBG_TOP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBG_TOP_expected_prev);
		$display ("     Real value = %b", DBG_TOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBG_TOP_exp[0] = DBG_TOP_expected_prev[0];
	end
	if (
		( DBG_TOP_expected_prev[1] !== 1'bx ) && ( DBG_TOP_prev[1] !== DBG_TOP_expected_prev[1] )
		&& ((DBG_TOP_expected_prev[1] !== last_DBG_TOP_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBG_TOP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBG_TOP_expected_prev);
		$display ("     Real value = %b", DBG_TOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBG_TOP_exp[1] = DBG_TOP_expected_prev[1];
	end
	if (
		( DBG_TOP_expected_prev[2] !== 1'bx ) && ( DBG_TOP_prev[2] !== DBG_TOP_expected_prev[2] )
		&& ((DBG_TOP_expected_prev[2] !== last_DBG_TOP_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBG_TOP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBG_TOP_expected_prev);
		$display ("     Real value = %b", DBG_TOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBG_TOP_exp[2] = DBG_TOP_expected_prev[2];
	end
	if (
		( DBG_TOP_expected_prev[3] !== 1'bx ) && ( DBG_TOP_prev[3] !== DBG_TOP_expected_prev[3] )
		&& ((DBG_TOP_expected_prev[3] !== last_DBG_TOP_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBG_TOP[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBG_TOP_expected_prev);
		$display ("     Real value = %b", DBG_TOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBG_TOP_exp[3] = DBG_TOP_expected_prev[3];
	end
	if (
		( DBG_TOP_expected_prev[4] !== 1'bx ) && ( DBG_TOP_prev[4] !== DBG_TOP_expected_prev[4] )
		&& ((DBG_TOP_expected_prev[4] !== last_DBG_TOP_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBG_TOP[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBG_TOP_expected_prev);
		$display ("     Real value = %b", DBG_TOP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DBG_TOP_exp[4] = DBG_TOP_expected_prev[4];
	end
	if (
		( DBG_TOP-1_expected_prev[0] !== 1'bx ) && ( DBG_TOP-1_prev[0] !== DBG_TOP-1_expected_prev[0] )
		&& ((DBG_TOP-1_expected_prev[0] !== last_DBG_TOP-1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBG_TOP-1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBG_TOP-1_expected_prev);
		$display ("     Real value = %b", DBG_TOP-1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBG_TOP-1_exp[0] = DBG_TOP-1_expected_prev[0];
	end
	if (
		( DBG_TOP-1_expected_prev[1] !== 1'bx ) && ( DBG_TOP-1_prev[1] !== DBG_TOP-1_expected_prev[1] )
		&& ((DBG_TOP-1_expected_prev[1] !== last_DBG_TOP-1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBG_TOP-1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBG_TOP-1_expected_prev);
		$display ("     Real value = %b", DBG_TOP-1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBG_TOP-1_exp[1] = DBG_TOP-1_expected_prev[1];
	end
	if (
		( DBG_TOP-1_expected_prev[2] !== 1'bx ) && ( DBG_TOP-1_prev[2] !== DBG_TOP-1_expected_prev[2] )
		&& ((DBG_TOP-1_expected_prev[2] !== last_DBG_TOP-1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBG_TOP-1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBG_TOP-1_expected_prev);
		$display ("     Real value = %b", DBG_TOP-1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBG_TOP-1_exp[2] = DBG_TOP-1_expected_prev[2];
	end
	if (
		( DBG_TOP-1_expected_prev[3] !== 1'bx ) && ( DBG_TOP-1_prev[3] !== DBG_TOP-1_expected_prev[3] )
		&& ((DBG_TOP-1_expected_prev[3] !== last_DBG_TOP-1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBG_TOP-1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBG_TOP-1_expected_prev);
		$display ("     Real value = %b", DBG_TOP-1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBG_TOP-1_exp[3] = DBG_TOP-1_expected_prev[3];
	end
	if (
		( DBG_TOP-1_expected_prev[4] !== 1'bx ) && ( DBG_TOP-1_prev[4] !== DBG_TOP-1_expected_prev[4] )
		&& ((DBG_TOP-1_expected_prev[4] !== last_DBG_TOP-1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DBG_TOP-1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DBG_TOP-1_expected_prev);
		$display ("     Real value = %b", DBG_TOP-1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DBG_TOP-1_exp[4] = DBG_TOP-1_expected_prev[4];
	end
	if (
		( EMPTY_expected_prev !== 1'bx ) && ( EMPTY_prev !== EMPTY_expected_prev )
		&& ((EMPTY_expected_prev !== last_EMPTY_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EMPTY :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EMPTY_expected_prev);
		$display ("     Real value = %b", EMPTY_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EMPTY_exp = EMPTY_expected_prev;
	end
	if (
		( FULL_expected_prev !== 1'bx ) && ( FULL_prev !== FULL_expected_prev )
		&& ((FULL_expected_prev !== last_FULL_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FULL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FULL_expected_prev);
		$display ("     Real value = %b", FULL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_FULL_exp = FULL_expected_prev;
	end
	if (
		( OUT_expected_prev[0] !== 1'bx ) && ( OUT_prev[0] !== OUT_expected_prev[0] )
		&& ((OUT_expected_prev[0] !== last_OUT_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OUT_exp[0] = OUT_expected_prev[0];
	end
	if (
		( OUT_expected_prev[1] !== 1'bx ) && ( OUT_prev[1] !== OUT_expected_prev[1] )
		&& ((OUT_expected_prev[1] !== last_OUT_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OUT_exp[1] = OUT_expected_prev[1];
	end
	if (
		( OUT_expected_prev[2] !== 1'bx ) && ( OUT_prev[2] !== OUT_expected_prev[2] )
		&& ((OUT_expected_prev[2] !== last_OUT_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OUT_exp[2] = OUT_expected_prev[2];
	end
	if (
		( OUT_expected_prev[3] !== 1'bx ) && ( OUT_prev[3] !== OUT_expected_prev[3] )
		&& ((OUT_expected_prev[3] !== last_OUT_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OUT_exp[3] = OUT_expected_prev[3];
	end
	if (
		( OUT_expected_prev[4] !== 1'bx ) && ( OUT_prev[4] !== OUT_expected_prev[4] )
		&& ((OUT_expected_prev[4] !== last_OUT_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OUT_exp[4] = OUT_expected_prev[4];
	end
	if (
		( OUT_expected_prev[5] !== 1'bx ) && ( OUT_prev[5] !== OUT_expected_prev[5] )
		&& ((OUT_expected_prev[5] !== last_OUT_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OUT_exp[5] = OUT_expected_prev[5];
	end
	if (
		( OUT_expected_prev[6] !== 1'bx ) && ( OUT_prev[6] !== OUT_expected_prev[6] )
		&& ((OUT_expected_prev[6] !== last_OUT_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OUT_exp[6] = OUT_expected_prev[6];
	end
	if (
		( OUT_expected_prev[7] !== 1'bx ) && ( OUT_prev[7] !== OUT_expected_prev[7] )
		&& ((OUT_expected_prev[7] !== last_OUT_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OUT_exp[7] = OUT_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module STACK_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg EN;
reg [7:0] INP;
reg PUSH/POP;
reg RSTN;
// wires                                               
wire [4:0] DBG_TOP;
wire [4:0] DBG_TOP-1;
wire EMPTY;
wire FULL;
wire [7:0] OUT;

wire sampler;                             

// assign statements (if any)                          
STACK i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.DBG_TOP(DBG_TOP),
	.\DBG_TOP-1 (DBG_TOP-1),
	.EMPTY(EMPTY),
	.EN(EN),
	.FULL(FULL),
	.INP(INP),
	.OUT(OUT),
	.\PUSH/POP (PUSH/POP),
	.RSTN(RSTN)
);

// CLK
initial
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	# 5000;
	repeat(98)
	begin
		CLK = 1'b0;
		CLK = #5000 1'b1;
		# 5000;
	end
	CLK = 1'b0;
	CLK = #5000 1'b1;
end 

// RSTN
initial
begin
	RSTN = 1'b0;
	RSTN = #10000 1'b1;
end 

// EN
initial
begin
	EN = 1'b1;
	EN = #500000 1'b0;
end 

// PUSH/POP
initial
begin
	PUSH/POP = 1'b0;
	PUSH/POP = #50000 1'b1;
	PUSH/POP = #10000 1'b0;
	PUSH/POP = #50000 1'b1;
	PUSH/POP = #20000 1'b0;
	PUSH/POP = #10000 1'b1;
	PUSH/POP = #10000 1'b0;
	PUSH/POP = #70000 1'b1;
	PUSH/POP = #20000 1'b0;
	PUSH/POP = #10000 1'b1;
	PUSH/POP = #10000 1'b0;
	PUSH/POP = #10000 1'b1;
	PUSH/POP = #10000 1'b0;
	PUSH/POP = #70000 1'b1;
	PUSH/POP = #10000 1'b0;
	PUSH/POP = #10000 1'b1;
	PUSH/POP = #20000 1'b0;
	PUSH/POP = #40000 1'b1;
	PUSH/POP = #10000 1'b0;
	PUSH/POP = #20000 1'b1;
	PUSH/POP = #30000 1'b0;
	PUSH/POP = #40000 1'b1;
	PUSH/POP = #10000 1'b0;
	PUSH/POP = #20000 1'b1;
	PUSH/POP = #10000 1'b0;
	PUSH/POP = #20000 1'b1;
	PUSH/POP = #10000 1'b0;
	PUSH/POP = #30000 1'b1;
	PUSH/POP = #20000 1'b0;
	PUSH/POP = #10000 1'b1;
	PUSH/POP = #10000 1'b0;
	PUSH/POP = #10000 1'b1;
	PUSH/POP = #60000 1'b0;
	PUSH/POP = #10000 1'b1;
	PUSH/POP = #10000 1'b0;
	PUSH/POP = #10000 1'b1;
	PUSH/POP = #20000 1'b0;
	PUSH/POP = #10000 1'b1;
	PUSH/POP = #40000 1'b0;
	PUSH/POP = #10000 1'b1;
	PUSH/POP = #10000 1'b0;
	PUSH/POP = #10000 1'b1;
	PUSH/POP = #10000 1'b0;
	PUSH/POP = #20000 1'b1;
	PUSH/POP = #20000 1'b0;
	PUSH/POP = #10000 1'b1;
	PUSH/POP = #10000 1'b0;
	PUSH/POP = #20000 1'b1;
end 
// INP[ 7 ]
initial
begin
	INP[7] = 1'b1;
	INP[7] = #4000 1'b0;
	INP[7] = #10000 1'b1;
	INP[7] = #10000 1'b0;
	INP[7] = #10000 1'b1;
	INP[7] = #10000 1'b0;
	INP[7] = #10000 1'b1;
	INP[7] = #40000 1'b0;
	INP[7] = #30000 1'b1;
	INP[7] = #10000 1'b0;
	INP[7] = #50000 1'b1;
	INP[7] = #10000 1'b0;
	INP[7] = #30000 1'b1;
	INP[7] = #20000 1'b0;
	INP[7] = #40000 1'b1;
	INP[7] = #10000 1'b0;
	INP[7] = #30000 1'b1;
	INP[7] = #10000 1'b0;
	INP[7] = #10000 1'b1;
	INP[7] = #50000 1'b0;
	INP[7] = #20000 1'b1;
	INP[7] = #10000 1'b0;
	INP[7] = #10000 1'b1;
	INP[7] = #10000 1'b0;
	INP[7] = #20000 1'b1;
	INP[7] = #10000 1'b0;
	INP[7] = #30000 1'b1;
	INP[7] = #4000 1'b0;
	INP[7] = #10000 1'b1;
	INP[7] = #30000 1'b0;
	INP[7] = #10000 1'b1;
	INP[7] = #40000 1'b0;
	INP[7] = #50000 1'b1;
	INP[7] = #10000 1'b0;
	INP[7] = #10000 1'b1;
	INP[7] = #20000 1'b0;
	INP[7] = #10000 1'b1;
	INP[7] = #30000 1'b0;
	INP[7] = #10000 1'b1;
	INP[7] = #10000 1'b0;
	INP[7] = #38000 1'b1;
	INP[7] = #20000 1'b0;
	INP[7] = #10000 1'b1;
	INP[7] = #20000 1'b0;
	INP[7] = #20000 1'b1;
	INP[7] = #30000 1'b0;
	INP[7] = #10000 1'b1;
	INP[7] = #20000 1'b0;
	INP[7] = #20000 1'b1;
	INP[7] = #20000 1'b0;
	INP[7] = #10000 1'b1;
	INP[7] = #10000 1'b0;
	INP[7] = #10000 1'b1;
end 
// INP[ 6 ]
initial
begin
	INP[6] = 1'b0;
	INP[6] = #14000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #10000 1'b1;
	INP[6] = #20000 1'b0;
	INP[6] = #30000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #10000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #30000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #10000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #30000 1'b1;
	INP[6] = #30000 1'b0;
	INP[6] = #10000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #10000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #10000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #40000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #30000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #20000 1'b1;
	INP[6] = #30000 1'b0;
	INP[6] = #10000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #20000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #10000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #4000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #10000 1'b1;
	INP[6] = #20000 1'b0;
	INP[6] = #20000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #20000 1'b1;
	INP[6] = #20000 1'b0;
	INP[6] = #10000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #10000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #20000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #20000 1'b1;
	INP[6] = #20000 1'b0;
	INP[6] = #10000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #8000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #10000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #30000 1'b1;
	INP[6] = #20000 1'b0;
	INP[6] = #10000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #20000 1'b1;
	INP[6] = #20000 1'b0;
	INP[6] = #20000 1'b1;
	INP[6] = #10000 1'b0;
	INP[6] = #30000 1'b1;
	INP[6] = #20000 1'b0;
	INP[6] = #20000 1'b1;
end 
// INP[ 5 ]
initial
begin
	INP[5] = 1'b0;
	INP[5] = #4000 1'b1;
	INP[5] = #10000 1'b0;
	INP[5] = #10000 1'b1;
	INP[5] = #20000 1'b0;
	INP[5] = #10000 1'b1;
	INP[5] = #20000 1'b0;
	INP[5] = #10000 1'b1;
	INP[5] = #10000 1'b0;
	INP[5] = #10000 1'b1;
	INP[5] = #10000 1'b0;
	INP[5] = #10000 1'b1;
	INP[5] = #40000 1'b0;
	INP[5] = #20000 1'b1;
	INP[5] = #10000 1'b0;
	INP[5] = #10000 1'b1;
	INP[5] = #10000 1'b0;
	INP[5] = #20000 1'b1;
	INP[5] = #60000 1'b0;
	INP[5] = #40000 1'b1;
	INP[5] = #10000 1'b0;
	INP[5] = #10000 1'b1;
	INP[5] = #20000 1'b0;
	INP[5] = #30000 1'b1;
	INP[5] = #10000 1'b0;
	INP[5] = #10000 1'b1;
	INP[5] = #70000 1'b0;
	INP[5] = #54000 1'b1;
	INP[5] = #20000 1'b0;
	INP[5] = #10000 1'b1;
	INP[5] = #20000 1'b0;
	INP[5] = #10000 1'b1;
	INP[5] = #20000 1'b0;
	INP[5] = #10000 1'b1;
	INP[5] = #10000 1'b0;
	INP[5] = #20000 1'b1;
	INP[5] = #10000 1'b0;
	INP[5] = #10000 1'b1;
	INP[5] = #30000 1'b0;
	INP[5] = #10000 1'b1;
	INP[5] = #20000 1'b0;
	INP[5] = #8000 1'b1;
	INP[5] = #10000 1'b0;
	INP[5] = #10000 1'b1;
	INP[5] = #10000 1'b0;
	INP[5] = #10000 1'b1;
	INP[5] = #10000 1'b0;
	INP[5] = #10000 1'b1;
	INP[5] = #10000 1'b0;
	INP[5] = #60000 1'b1;
	INP[5] = #40000 1'b0;
	INP[5] = #10000 1'b1;
	INP[5] = #20000 1'b0;
	INP[5] = #10000 1'b1;
	INP[5] = #10000 1'b0;
	INP[5] = #20000 1'b1;
end 
// INP[ 4 ]
initial
begin
	INP[4] = 1'b1;
	INP[4] = #4000 1'b0;
	INP[4] = #30000 1'b1;
	INP[4] = #10000 1'b0;
	INP[4] = #20000 1'b1;
	INP[4] = #10000 1'b0;
	INP[4] = #10000 1'b1;
	INP[4] = #10000 1'b0;
	INP[4] = #10000 1'b1;
	INP[4] = #10000 1'b0;
	INP[4] = #60000 1'b1;
	INP[4] = #10000 1'b0;
	INP[4] = #10000 1'b1;
	INP[4] = #30000 1'b0;
	INP[4] = #10000 1'b1;
	INP[4] = #20000 1'b0;
	INP[4] = #40000 1'b1;
	INP[4] = #20000 1'b0;
	INP[4] = #10000 1'b1;
	INP[4] = #10000 1'b0;
	INP[4] = #10000 1'b1;
	INP[4] = #40000 1'b0;
	INP[4] = #20000 1'b1;
	INP[4] = #10000 1'b0;
	INP[4] = #50000 1'b1;
	INP[4] = #10000 1'b0;
	INP[4] = #20000 1'b1;
	INP[4] = #10000 1'b0;
	INP[4] = #4000 1'b1;
	INP[4] = #10000 1'b0;
	INP[4] = #20000 1'b1;
	INP[4] = #20000 1'b0;
	INP[4] = #20000 1'b1;
	INP[4] = #50000 1'b0;
	INP[4] = #10000 1'b1;
	INP[4] = #10000 1'b0;
	INP[4] = #10000 1'b1;
	INP[4] = #40000 1'b0;
	INP[4] = #20000 1'b1;
	INP[4] = #30000 1'b0;
	INP[4] = #18000 1'b1;
	INP[4] = #20000 1'b0;
	INP[4] = #40000 1'b1;
	INP[4] = #30000 1'b0;
	INP[4] = #80000 1'b1;
	INP[4] = #10000 1'b0;
end 
// INP[ 3 ]
initial
begin
	INP[3] = 1'b0;
	INP[3] = #4000 1'b1;
	INP[3] = #20000 1'b0;
	INP[3] = #40000 1'b1;
	INP[3] = #10000 1'b0;
	INP[3] = #40000 1'b1;
	INP[3] = #10000 1'b0;
	INP[3] = #10000 1'b1;
	INP[3] = #10000 1'b0;
	INP[3] = #20000 1'b1;
	INP[3] = #60000 1'b0;
	INP[3] = #30000 1'b1;
	INP[3] = #20000 1'b0;
	INP[3] = #10000 1'b1;
	INP[3] = #20000 1'b0;
	INP[3] = #30000 1'b1;
	INP[3] = #20000 1'b0;
	INP[3] = #20000 1'b1;
	INP[3] = #10000 1'b0;
	INP[3] = #20000 1'b1;
	INP[3] = #40000 1'b0;
	INP[3] = #20000 1'b1;
	INP[3] = #10000 1'b0;
	INP[3] = #10000 1'b1;
	INP[3] = #10000 1'b0;
	INP[3] = #14000 1'b1;
	INP[3] = #30000 1'b0;
	INP[3] = #10000 1'b1;
	INP[3] = #10000 1'b0;
	INP[3] = #10000 1'b1;
	INP[3] = #100000 1'b0;
	INP[3] = #20000 1'b1;
	INP[3] = #20000 1'b0;
	INP[3] = #10000 1'b1;
	INP[3] = #10000 1'b0;
	INP[3] = #28000 1'b1;
	INP[3] = #20000 1'b0;
	INP[3] = #10000 1'b1;
	INP[3] = #20000 1'b0;
	INP[3] = #10000 1'b1;
	INP[3] = #10000 1'b0;
	INP[3] = #60000 1'b1;
	INP[3] = #10000 1'b0;
	INP[3] = #50000 1'b1;
	INP[3] = #10000 1'b0;
	INP[3] = #20000 1'b1;
	INP[3] = #20000 1'b0;
end 
// INP[ 2 ]
initial
begin
	INP[2] = 1'b0;
	INP[2] = #14000 1'b1;
	INP[2] = #30000 1'b0;
	INP[2] = #10000 1'b1;
	INP[2] = #20000 1'b0;
	INP[2] = #20000 1'b1;
	INP[2] = #10000 1'b0;
	INP[2] = #10000 1'b1;
	INP[2] = #50000 1'b0;
	INP[2] = #10000 1'b1;
	INP[2] = #10000 1'b0;
	INP[2] = #50000 1'b1;
	INP[2] = #10000 1'b0;
	INP[2] = #10000 1'b1;
	INP[2] = #30000 1'b0;
	INP[2] = #40000 1'b1;
	INP[2] = #10000 1'b0;
	INP[2] = #10000 1'b1;
	INP[2] = #20000 1'b0;
	INP[2] = #10000 1'b1;
	INP[2] = #10000 1'b0;
	INP[2] = #30000 1'b1;
	INP[2] = #30000 1'b0;
	INP[2] = #20000 1'b1;
	INP[2] = #20000 1'b0;
	INP[2] = #54000 1'b1;
	INP[2] = #60000 1'b0;
	INP[2] = #20000 1'b1;
	INP[2] = #20000 1'b0;
	INP[2] = #10000 1'b1;
	INP[2] = #10000 1'b0;
	INP[2] = #10000 1'b1;
	INP[2] = #20000 1'b0;
	INP[2] = #10000 1'b1;
	INP[2] = #10000 1'b0;
	INP[2] = #58000 1'b1;
	INP[2] = #20000 1'b0;
	INP[2] = #10000 1'b1;
	INP[2] = #30000 1'b0;
	INP[2] = #10000 1'b1;
	INP[2] = #10000 1'b0;
	INP[2] = #10000 1'b1;
	INP[2] = #10000 1'b0;
	INP[2] = #10000 1'b1;
	INP[2] = #30000 1'b0;
	INP[2] = #60000 1'b1;
	INP[2] = #20000 1'b0;
end 
// INP[ 1 ]
initial
begin
	INP[1] = 1'b0;
	INP[1] = #4000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #10000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #30000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #10000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #40000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #20000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #20000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #10000 1'b1;
	INP[1] = #20000 1'b0;
	INP[1] = #10000 1'b1;
	INP[1] = #30000 1'b0;
	INP[1] = #40000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #10000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #10000 1'b1;
	INP[1] = #40000 1'b0;
	INP[1] = #20000 1'b1;
	INP[1] = #20000 1'b0;
	INP[1] = #10000 1'b1;
	INP[1] = #20000 1'b0;
	INP[1] = #20000 1'b1;
	INP[1] = #20000 1'b0;
	INP[1] = #4000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #20000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #30000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #20000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #10000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #10000 1'b1;
	INP[1] = #30000 1'b0;
	INP[1] = #60000 1'b1;
	INP[1] = #18000 1'b0;
	INP[1] = #20000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #10000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #10000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #20000 1'b1;
	INP[1] = #20000 1'b0;
	INP[1] = #20000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #10000 1'b1;
	INP[1] = #30000 1'b0;
	INP[1] = #10000 1'b1;
	INP[1] = #10000 1'b0;
	INP[1] = #20000 1'b1;
	INP[1] = #20000 1'b0;
end 
// INP[ 0 ]
initial
begin
	INP[0] = 1'b1;
	INP[0] = #4000 1'b0;
	INP[0] = #10000 1'b1;
	INP[0] = #30000 1'b0;
	INP[0] = #20000 1'b1;
	INP[0] = #10000 1'b0;
	INP[0] = #30000 1'b1;
	INP[0] = #30000 1'b0;
	INP[0] = #20000 1'b1;
	INP[0] = #20000 1'b0;
	INP[0] = #20000 1'b1;
	INP[0] = #50000 1'b0;
	INP[0] = #30000 1'b1;
	INP[0] = #20000 1'b0;
	INP[0] = #20000 1'b1;
	INP[0] = #20000 1'b0;
	INP[0] = #20000 1'b1;
	INP[0] = #50000 1'b0;
	INP[0] = #40000 1'b1;
	INP[0] = #30000 1'b0;
	INP[0] = #10000 1'b1;
	INP[0] = #20000 1'b0;
	INP[0] = #14000 1'b1;
	INP[0] = #20000 1'b0;
	INP[0] = #20000 1'b1;
	INP[0] = #10000 1'b0;
	INP[0] = #10000 1'b1;
	INP[0] = #20000 1'b0;
	INP[0] = #10000 1'b1;
	INP[0] = #10000 1'b0;
	INP[0] = #30000 1'b1;
	INP[0] = #10000 1'b0;
	INP[0] = #20000 1'b1;
	INP[0] = #10000 1'b0;
	INP[0] = #30000 1'b1;
	INP[0] = #10000 1'b0;
	INP[0] = #28000 1'b1;
	INP[0] = #10000 1'b0;
	INP[0] = #10000 1'b1;
	INP[0] = #10000 1'b0;
	INP[0] = #20000 1'b1;
	INP[0] = #10000 1'b0;
	INP[0] = #10000 1'b1;
	INP[0] = #10000 1'b0;
	INP[0] = #10000 1'b1;
	INP[0] = #10000 1'b0;
	INP[0] = #10000 1'b1;
	INP[0] = #10000 1'b0;
	INP[0] = #10000 1'b1;
	INP[0] = #10000 1'b0;
	INP[0] = #30000 1'b1;
	INP[0] = #10000 1'b0;
	INP[0] = #20000 1'b1;
	INP[0] = #30000 1'b0;
end 

STACK_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.EN(EN),
	.INP(INP),
	.PUSH/POP(PUSH/POP),
	.RSTN(RSTN),
	.sampler_tx(sampler)
);

STACK_vlg_check_tst tb_out(
	.DBG_TOP(DBG_TOP),
	.DBG_TOP-1(DBG_TOP-1),
	.EMPTY(EMPTY),
	.FULL(FULL),
	.OUT(OUT),
	.sampler_rx(sampler)
);
endmodule

